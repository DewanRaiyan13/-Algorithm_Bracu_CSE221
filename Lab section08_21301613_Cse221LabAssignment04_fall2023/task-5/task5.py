# -*- coding: utf-8 -*-
"""task5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jh3ZJVxPiF-3_9OtTktWKVlN0wmgmHpF
"""

#task5
def BFS(G,s):
   colour=[0]
   for u in G.V:
         colour.append(0)
   Q = []
   path=[]
   t=[0]*len(G.V)
   p=[None]*len(G.V)
   colour[s] = 1
   Q.append(s)
   while Q != []:
         u =Q[0]
         if u==G.D:
             path=''
             f=u
             while f!=None:
                 path=str(f)+' '+path
                 f=p[f]
             print(f'Time: {t[u]}\nShortest Path: {path}',file=op_file)
             break
         Q=Q[1:]
         for v in G.Adj[u]:
                 if colour[v] == 0:
                        colour[v] = 1
                        t[v]=t[u]+1
                        p[v]=u
                        Q.append(v)
         colour[u]=2


ip_file=open('/content/sample_data/input-5','r')
ip_data=ip_file.readlines()
op_file=open('/content/sample_data/output-5','w')
class Adl:
 def __init__(self,ip_data):
  total_ver=(int(ip_data[0].split(' ')[0])+1)
  edge=int(ip_data[0].split(' ')[1])
  self.D=int(ip_data[0].split(' ')[2])
  self.V=[]
  self.Adj={}
  for i in range(total_ver):
     self.Adj[i]=[]
     self.V.append(i)
  for m in range(1,edge+1):
      val=[]
      hold=ip_data[m].split(' ')
      self.Adj[int(hold[0])].append(int(hold[1]))
      self.Adj[int(hold[1])].append(int(hold[0]))


G=Adl(ip_data)
BFS(G,1)