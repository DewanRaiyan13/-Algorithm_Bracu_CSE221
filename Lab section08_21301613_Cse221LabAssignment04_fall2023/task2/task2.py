# -*- coding: utf-8 -*-
"""tasl2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jh3ZJVxPiF-3_9OtTktWKVlN0wmgmHpF
"""

#TASK2
from collections import deque

def bfs(adj_list, start):
    colors = [0] * len(adj_list)
    queue = deque([start])
    colors[start] = 1
    traversal_order = []

    while queue:
        u = queue.popleft()
        traversal_order.append(u)
        for v in adj_list[u]:
            if colors[v] == 0:
                colors[v] = 1
                queue.append(v)
    return traversal_order

with open('/content/sample_data/INPUT-2') as f:
    n, m = map(int, f.readline().split())
    adj_list = [[] for _ in range(n)]
    for i in range(m):
        u, v = map(int, f.readline().split())
        adj_list[u-1].append(v-1)
        adj_list[v-1].append(u-1)

traversal_order = bfs(adj_list, 0)
with open('/content/sample_data/output-2', 'w') as f:
    f.write(' '.join(str(x+1) for x in traversal_order) + '\n')
    rev_traversal_order = list(reversed(traversal_order))
    if rev_traversal_order != traversal_order:
        f.write('( Another valid path:\n')
        f.write(' '.join(str(x+1) for x in rev_traversal_order) + ' )\n')