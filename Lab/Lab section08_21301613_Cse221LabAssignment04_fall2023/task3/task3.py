# -*- coding: utf-8 -*-
"""tasl3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Jh3ZJVxPiF-3_9OtTktWKVlN0wmgmHpF
"""

#task3
from collections import defaultdict

def DFS(graph, node, visited, path):
    visited[node] = True
    path.append(str(node))
    for neighbor in graph[node]:
        if not visited[neighbor]:
            DFS(graph, neighbor, visited, path)

def create_graph(input_file):
    graph = defaultdict(list)
    with open(input_file, 'r') as f:
        lines = f.readlines()
        n, m = map(int, lines[0].split())
        for line in lines[1:]:
            u, v = map(int, line.split())
            graph[u].append(v)
            graph[v].append(u)
    return graph

def write_output(output_file, paths):
    with open(output_file, 'w') as f:
        for path in paths:
            f.write(' '.join(path) + '\n')

# Driver code
if __name__ == '__main__':
    input_file = '/content/sample_data/input-3'
    output_file = '/content/sample_data/output-3'
    graph = create_graph(input_file)
    visited = [False] * (len(graph) + 1)
    path = []
    DFS(graph, 1, visited, path)
    write_output(output_file, [path])